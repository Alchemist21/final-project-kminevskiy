defmodule ContractWrappers.Deployer do
  alias Ethereumex.HttpClient, as: Eth
  alias Blockchain.{Signature, Transaction}
  alias Youchallenge.Entities.Contract
  alias Youchallenge.Repo

  def address_for_hash(tx_hash) do
    case Eth.eth_get_transaction_receipt(tx_hash) do
      {:ok, %{"contractAddress" => address}} ->
        {:ok, address}

      {:ok, _} ->
        {:error, nil}
    end
  end

  def deploy_challenge_contract(args) do
    hex_key =
      System.get_env("DEPLOYER_SEED")
      |> BitHelper.from_hex()

    hex_data =
      "6080604052604051610f77380380610f77833981018060405260c081101561002657600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805164010000000081111561007057600080fd5b8281019050602081018481111561008657600080fd5b81518560018202830111640100000000821117156100a357600080fd5b505092919050505060006100c7858585610280640100000000026401000000009004565b905060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600260008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061022692919061029e565b5060808201518160040155905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050610343565b6000603c8202610e1084026201518086024201010190509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102df57805160ff191683800117855561030d565b8280016001018555821561030d579182015b8281111561030c5782518255916020019190600101906102f1565b5b50905061031a919061031e565b5090565b61034091905b8082111561033c576000816000905550600101610324565b5090565b90565b610c25806103526000396000f3fe6080604052600436106100fa576000357c0100000000000000000000000000000000000000000000000000000000900480636f3921ee1161009c5780639d9a7fe9116100765780639d9a7fe91461037b578063b59bb621146103aa578063b6127f93146103d9578063ce72eda414610440576100fa565b80636f3921ee1461029e57806384de1ea5146102cd5780638afdd5c114610324576100fa565b80634c2067c7116100d85780634c2067c7146101e6578063522e1177146102155780635c975abb146102445780635edf7d8b14610273576100fa565b80631a092541146100fc5780632129e25a1461018c5780632cd981d4146101b7575b005b34801561010857600080fd5b5061011161046b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610151578082015181840152602081019050610136565b50505050905090810190601f16801561017e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019857600080fd5b506101a1610510565b6040518082815260200191505060405180910390f35b3480156101c357600080fd5b506101cc610516565b604051808215151515815260200191505060405180910390f35b3480156101f257600080fd5b506101fb6105ce565b604051808215151515815260200191505060405180910390f35b34801561022157600080fd5b5061022a6105ef565b604051808215151515815260200191505060405180910390f35b34801561025057600080fd5b50610259610823565b604051808215151515815260200191505060405180910390f35b34801561027f57600080fd5b50610288610836565b6040518082815260200191505060405180910390f35b3480156102aa57600080fd5b506102b3610843565b604051808215151515815260200191505060405180910390f35b3480156102d957600080fd5b506102e2610856565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033057600080fd5b50610339610883565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038757600080fd5b506103906108b0565b604051808215151515815260200191505060405180910390f35b3480156103b657600080fd5b506103bf6108c3565b604051808215151515815260200191505060405180910390f35b3480156103e557600080fd5b50610426600480360360608110156103fc57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610a57565b604051808215151515815260200191505060405180910390f35b34801561044c57600080fd5b50610455610b98565b6040518082815260200191505060405180910390f35b606060026003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050505050905090565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561057357600080fd5b600060169054906101000a900460ff16156105ab5760008060166101000a81548160ff021916908315150217905550600090506105cb565b6001600060166101000a81548160ff021916908315150217905550600190505b90565b6000600260040154421015156105e757600190506105ec565b600090505b90565b60006002600401544210151561060457600080fd5b600060159054906101000a900460ff1615151561062057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561067b57600080fd5b600060169054906101000a900460ff1615151561069757600080fd5b6001600060156101000a81548160ff02191690831515021790555060006002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163111156107e0576002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631600181905550600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156107de573d6000803e3d6000fd5b505b7ff034adbccb0e6e0ef01b45231d49ec3f1a74c0fc0e29b6c3d9e2cb090b0711766001604051808215151515815260200191505060405180910390a16001905090565b600060169054906101000a900460ff1681565b6000600260040154905090565b600060149054906101000a900460ff1681565b6000600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060159054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092057600080fd5b6001600060156101000a81548160ff0219169083151502179055507f29b69b0ef017770509a3a02582408136e3e3492cdfec48431dfbeedbe39c7ce26002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610a4f573d6000803e3d6000fd5b506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab457600080fd5b60001515600060149054906101000a900460ff161515141515610ad657600080fd5b600060169054906101000a900460ff16151515610af257600080fd5b6001600060146101000a81548160ff021916908315150217905550600260040154421115610b3c57610b25848484610bdb565b600260040160008282540192505081905550610b51565b610b47848484610bdb565b6002600401819055505b7f9ec47da117402e5ec2abbf08b216f5fe88d079a9db165cfbff8e5383e649e2556002600401546040518082815260200191505060405180910390a1600190509392505050565b60006002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631905090565b6000603c8202610e108402620151808602420101019050939250505056fea165627a7a723058205f9180684e2673b3b8fb6371f27ec275d86227f0de996798a8ff84f0a2bee21e0029" <>
        contract_payload(args)

    encoded_payload = BitHelper.from_hex(hex_data)

    encoded_transaction =
      %Transaction{
        init: encoded_payload,
        gas_limit: decode_gas_estimate(hex_data) + 100_000,
        gas_price: decode_gas_price(),
        nonce: decode_account_nonce()
      }
      |> Signature.sign_transaction(hex_key)
      |> Transaction.serialize()
      |> ExRLP.encode()
      |> Base.encode16(case: :lower)

    Eth.eth_send_raw_transaction("0x" <> encoded_transaction)
    |> elem(1)
  end

  def deploy_challenger_accounts() do
    hex_key =
      System.get_env("DEPLOYER_SEED")
      |> BitHelper.from_hex()

    hex_data = Repo.get_by(Contract, name: "challenger_accounts").data
    encoded_payload = BitHelper.from_hex(hex_data)

    encoded_transaction =
      %Transaction{
        init: encoded_payload,
        gas_limit: decode_gas_estimate(hex_data) + 100_000,
        gas_price: decode_gas_price(),
        nonce: decode_account_nonce()
      }
      |> Signature.sign_transaction(hex_key)
      |> Transaction.serialize()
      |> ExRLP.encode()
      |> Base.encode16(case: :lower)

    Eth.eth_send_raw_transaction("0x" <> encoded_transaction)
  end

  def contract_payload(args) do
    selector = %ABI.FunctionSelector{
      function: nil,
      types: [:address, :address, {:uint, 256}, {:uint, 256}, {:uint, 256}, :string]
    }

    normalized_args = [
      args.challenger |> String.downcase() |> String.slice(2..-1) |> BitHelper.from_hex(),
      args.contender |> String.downcase() |> String.slice(2..-1) |> BitHelper.from_hex(),
      args.days,
      args.hours,
      args.minutes,
      args.description
    ]

    BitHelper.to_hex(ABI.TypeEncoder.encode(normalized_args, selector))
  end

  def decode_gas_estimate(encoded_data) do
    {:ok, hex_price} = Eth.request("eth_estimateGas", [%{data: "0x" <> encoded_data}], [])

    hex_price
    |> String.slice(2..-1)
    |> Integer.parse(16)
    |> elem(0)
  end

  def transaction_receipt(tx_hash) do
    with {:ok, nil} <- Eth.request("eth_getTransactionReceipt", [tx_hash], []) do
      {:ok, nil}
    else
      {:ok, %{"contractAddress" => address, "status" => status}} ->
        parsed_status =
          String.slice(status, 2..-1)
          |> Integer.parse(16)
          |> elem(0)

        {:ok, parsed_status, address}
    end
  end

  def decode_gas_price() do
    {:ok, hex_price} = Eth.eth_gas_price()

    {price, _} =
      hex_price
      |> String.slice(2..-1)
      |> Integer.parse(16)

    price
  end

  def decode_account_nonce() do
    account = System.get_env("DEPLOYER_ACCOUNT")
    {:ok, lnh} = Eth.eth_get_transaction_count(account, "latest")

    {latest_nonce, _} =
      lnh
      |> String.slice(2..-1)
      |> Integer.parse(16)

    {:ok, pnh} = Eth.eth_get_transaction_count(account, "pending")

    {pending_nonce, _} =
      pnh
      |> String.slice(2..-1)
      |> Integer.parse(16)

    cond do
      latest_nonce > pending_nonce ->
        latest_nonce

      true ->
        pending_nonce
    end
  end

  def decode_string(hex) do
    {_, binary} =
      hex
      |> String.slice(2..-1)
      |> :binary.bin_to_list()
      |> Enum.chunk_every(64)
      |> List.last()
      |> :binary.list_to_bin()
      |> Base.decode16(case: :mixed)

    String.trim_trailing(binary, <<0>>)
  end
end
